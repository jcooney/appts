// Package publichols provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package publichols

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for HolidayTypes.
const (
	Authorities HolidayTypes = "Authorities"
	Bank        HolidayTypes = "Bank"
	Observance  HolidayTypes = "Observance"
	Optional    HolidayTypes = "Optional"
	Public      HolidayTypes = "Public"
	School      HolidayTypes = "School"
)

// CountryInfoDto CountryInfo Dto
type CountryInfoDto struct {
	// Borders Country Borders
	Borders *[]CountryInfoDto `json:"borders"`

	// CommonName CommonName
	CommonName *string `json:"commonName"`

	// CountryCode CountryCode
	CountryCode *string `json:"countryCode"`

	// OfficialName OfficialName
	OfficialName *string `json:"officialName"`

	// Region Region
	Region *string `json:"region"`
}

// CountryV3Dto Country
type CountryV3Dto struct {
	// CountryCode Country Code
	CountryCode *string `json:"countryCode"`

	// Name Country Name
	Name *string `json:"name"`
}

// HolidayTypes defines model for HolidayTypes.
type HolidayTypes string

// LongWeekendV3Dto Long Weekend
type LongWeekendV3Dto struct {
	// BridgeDays Test
	BridgeDays *[]openapi_types.Date `json:"bridgeDays"`

	// DayCount Day Count
	DayCount *int32 `json:"dayCount,omitempty"`

	// EndDate End Date
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// NeedBridgeDay Need Bridge Day
	NeedBridgeDay *bool `json:"needBridgeDay,omitempty"`

	// StartDate Start Date
	StartDate *openapi_types.Date `json:"startDate,omitempty"`
}

// PublicHolidayV3Dto Public Holiday
type PublicHolidayV3Dto struct {
	// Counties ISO-3166-2 - Federal states
	Counties *[]string `json:"counties"`

	// CountryCode ISO 3166-1 alpha-2
	CountryCode *string `json:"countryCode"`

	// Date The date
	Date *openapi_types.Date `json:"date,omitempty"`

	// Fixed Is this public holiday every year on the same date
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Fixed *bool `json:"fixed,omitempty"`

	// Global Is this public holiday in every county (federal state)
	Global *bool `json:"global,omitempty"`

	// LaunchYear The launch year of the public holiday
	LaunchYear *int32 `json:"launchYear"`

	// LocalName Local name
	LocalName *string `json:"localName"`

	// Name English name
	Name *string `json:"name"`

	// Types A list of types the public holiday it is valid
	Types *[]HolidayTypes `json:"types"`
}

// VersionInfoDto Version Info Dto
type VersionInfoDto struct {
	// Name Name
	Name *string `json:"name"`

	// Version Version
	Version *string `json:"version"`
}

// PublicHolidayIsTodayPublicHolidayParams defines parameters for PublicHolidayIsTodayPublicHoliday.
type PublicHolidayIsTodayPublicHolidayParams struct {
	// CountyCode The Subdivison Code
	CountyCode *string `form:"countyCode,omitempty" json:"countyCode,omitempty"`

	// Offset utc timezone offset
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// LongWeekendLongWeekendParams defines parameters for LongWeekendLongWeekend.
type LongWeekendLongWeekendParams struct {
	AvailableBridgeDays *int32  `form:"availableBridgeDays,omitempty" json:"availableBridgeDays,omitempty"`
	SubdivisonCode      *string `form:"subdivisonCode,omitempty" json:"subdivisonCode,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CountryAvailableCountries request
	CountryAvailableCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountryCountryInfo request
	CountryCountryInfo(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicHolidayIsTodayPublicHoliday request
	PublicHolidayIsTodayPublicHoliday(ctx context.Context, countryCode string, params *PublicHolidayIsTodayPublicHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LongWeekendLongWeekend request
	LongWeekendLongWeekend(ctx context.Context, year int32, countryCode string, params *LongWeekendLongWeekendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicHolidayNextPublicHolidays request
	PublicHolidayNextPublicHolidays(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicHolidayNextPublicHolidaysWorldwide request
	PublicHolidayNextPublicHolidaysWorldwide(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicHolidayPublicHolidaysV3 request
	PublicHolidayPublicHolidaysV3(ctx context.Context, year int32, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersionGetVersion request
	VersionGetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CountryAvailableCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountryAvailableCountriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountryCountryInfo(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountryCountryInfoRequest(c.Server, countryCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicHolidayIsTodayPublicHoliday(ctx context.Context, countryCode string, params *PublicHolidayIsTodayPublicHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicHolidayIsTodayPublicHolidayRequest(c.Server, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LongWeekendLongWeekend(ctx context.Context, year int32, countryCode string, params *LongWeekendLongWeekendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLongWeekendLongWeekendRequest(c.Server, year, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicHolidayNextPublicHolidays(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicHolidayNextPublicHolidaysRequest(c.Server, countryCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicHolidayNextPublicHolidaysWorldwide(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicHolidayNextPublicHolidaysWorldwideRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicHolidayPublicHolidaysV3(ctx context.Context, year int32, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicHolidayPublicHolidaysV3Request(c.Server, year, countryCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersionGetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCountryAvailableCountriesRequest generates requests for CountryAvailableCountries
func NewCountryAvailableCountriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/AvailableCountries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCountryCountryInfoRequest generates requests for CountryCountryInfo
func NewCountryCountryInfoRequest(server string, countryCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "countryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/CountryInfo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicHolidayIsTodayPublicHolidayRequest generates requests for PublicHolidayIsTodayPublicHoliday
func NewPublicHolidayIsTodayPublicHolidayRequest(server string, countryCode string, params *PublicHolidayIsTodayPublicHolidayParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "countryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/IsTodayPublicHoliday/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CountyCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countyCode", runtime.ParamLocationQuery, *params.CountyCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLongWeekendLongWeekendRequest generates requests for LongWeekendLongWeekend
func NewLongWeekendLongWeekendRequest(server string, year int32, countryCode string, params *LongWeekendLongWeekendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "year", runtime.ParamLocationPath, year)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "countryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/LongWeekend/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AvailableBridgeDays != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "availableBridgeDays", runtime.ParamLocationQuery, *params.AvailableBridgeDays); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubdivisonCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subdivisonCode", runtime.ParamLocationQuery, *params.SubdivisonCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicHolidayNextPublicHolidaysRequest generates requests for PublicHolidayNextPublicHolidays
func NewPublicHolidayNextPublicHolidaysRequest(server string, countryCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "countryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/NextPublicHolidays/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicHolidayNextPublicHolidaysWorldwideRequest generates requests for PublicHolidayNextPublicHolidaysWorldwide
func NewPublicHolidayNextPublicHolidaysWorldwideRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/NextPublicHolidaysWorldwide")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicHolidayPublicHolidaysV3Request generates requests for PublicHolidayPublicHolidaysV3
func NewPublicHolidayPublicHolidaysV3Request(server string, year int32, countryCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "year", runtime.ParamLocationPath, year)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "countryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/PublicHolidays/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionGetVersionRequest generates requests for VersionGetVersion
func NewVersionGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/Version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CountryAvailableCountriesWithResponse request
	CountryAvailableCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CountryAvailableCountriesResponse, error)

	// CountryCountryInfoWithResponse request
	CountryCountryInfoWithResponse(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*CountryCountryInfoResponse, error)

	// PublicHolidayIsTodayPublicHolidayWithResponse request
	PublicHolidayIsTodayPublicHolidayWithResponse(ctx context.Context, countryCode string, params *PublicHolidayIsTodayPublicHolidayParams, reqEditors ...RequestEditorFn) (*PublicHolidayIsTodayPublicHolidayResponse, error)

	// LongWeekendLongWeekendWithResponse request
	LongWeekendLongWeekendWithResponse(ctx context.Context, year int32, countryCode string, params *LongWeekendLongWeekendParams, reqEditors ...RequestEditorFn) (*LongWeekendLongWeekendResponse, error)

	// PublicHolidayNextPublicHolidaysWithResponse request
	PublicHolidayNextPublicHolidaysWithResponse(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*PublicHolidayNextPublicHolidaysResponse, error)

	// PublicHolidayNextPublicHolidaysWorldwideWithResponse request
	PublicHolidayNextPublicHolidaysWorldwideWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicHolidayNextPublicHolidaysWorldwideResponse, error)

	// PublicHolidayPublicHolidaysV3WithResponse request
	PublicHolidayPublicHolidaysV3WithResponse(ctx context.Context, year int32, countryCode string, reqEditors ...RequestEditorFn) (*PublicHolidayPublicHolidaysV3Response, error)

	// VersionGetVersionWithResponse request
	VersionGetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionGetVersionResponse, error)
}

type CountryAvailableCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CountryV3Dto
}

// Status returns HTTPResponse.Status
func (r CountryAvailableCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountryAvailableCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountryCountryInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountryInfoDto
}

// Status returns HTTPResponse.Status
func (r CountryCountryInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountryCountryInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicHolidayIsTodayPublicHolidayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublicHolidayIsTodayPublicHolidayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicHolidayIsTodayPublicHolidayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LongWeekendLongWeekendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LongWeekendV3Dto
}

// Status returns HTTPResponse.Status
func (r LongWeekendLongWeekendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LongWeekendLongWeekendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicHolidayNextPublicHolidaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublicHolidayV3Dto
}

// Status returns HTTPResponse.Status
func (r PublicHolidayNextPublicHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicHolidayNextPublicHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicHolidayNextPublicHolidaysWorldwideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublicHolidayV3Dto
}

// Status returns HTTPResponse.Status
func (r PublicHolidayNextPublicHolidaysWorldwideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicHolidayNextPublicHolidaysWorldwideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicHolidayPublicHolidaysV3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublicHolidayV3Dto
}

// Status returns HTTPResponse.Status
func (r PublicHolidayPublicHolidaysV3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicHolidayPublicHolidaysV3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionGetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInfoDto
}

// Status returns HTTPResponse.Status
func (r VersionGetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionGetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CountryAvailableCountriesWithResponse request returning *CountryAvailableCountriesResponse
func (c *ClientWithResponses) CountryAvailableCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CountryAvailableCountriesResponse, error) {
	rsp, err := c.CountryAvailableCountries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountryAvailableCountriesResponse(rsp)
}

// CountryCountryInfoWithResponse request returning *CountryCountryInfoResponse
func (c *ClientWithResponses) CountryCountryInfoWithResponse(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*CountryCountryInfoResponse, error) {
	rsp, err := c.CountryCountryInfo(ctx, countryCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountryCountryInfoResponse(rsp)
}

// PublicHolidayIsTodayPublicHolidayWithResponse request returning *PublicHolidayIsTodayPublicHolidayResponse
func (c *ClientWithResponses) PublicHolidayIsTodayPublicHolidayWithResponse(ctx context.Context, countryCode string, params *PublicHolidayIsTodayPublicHolidayParams, reqEditors ...RequestEditorFn) (*PublicHolidayIsTodayPublicHolidayResponse, error) {
	rsp, err := c.PublicHolidayIsTodayPublicHoliday(ctx, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicHolidayIsTodayPublicHolidayResponse(rsp)
}

// LongWeekendLongWeekendWithResponse request returning *LongWeekendLongWeekendResponse
func (c *ClientWithResponses) LongWeekendLongWeekendWithResponse(ctx context.Context, year int32, countryCode string, params *LongWeekendLongWeekendParams, reqEditors ...RequestEditorFn) (*LongWeekendLongWeekendResponse, error) {
	rsp, err := c.LongWeekendLongWeekend(ctx, year, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLongWeekendLongWeekendResponse(rsp)
}

// PublicHolidayNextPublicHolidaysWithResponse request returning *PublicHolidayNextPublicHolidaysResponse
func (c *ClientWithResponses) PublicHolidayNextPublicHolidaysWithResponse(ctx context.Context, countryCode string, reqEditors ...RequestEditorFn) (*PublicHolidayNextPublicHolidaysResponse, error) {
	rsp, err := c.PublicHolidayNextPublicHolidays(ctx, countryCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicHolidayNextPublicHolidaysResponse(rsp)
}

// PublicHolidayNextPublicHolidaysWorldwideWithResponse request returning *PublicHolidayNextPublicHolidaysWorldwideResponse
func (c *ClientWithResponses) PublicHolidayNextPublicHolidaysWorldwideWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicHolidayNextPublicHolidaysWorldwideResponse, error) {
	rsp, err := c.PublicHolidayNextPublicHolidaysWorldwide(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicHolidayNextPublicHolidaysWorldwideResponse(rsp)
}

// PublicHolidayPublicHolidaysV3WithResponse request returning *PublicHolidayPublicHolidaysV3Response
func (c *ClientWithResponses) PublicHolidayPublicHolidaysV3WithResponse(ctx context.Context, year int32, countryCode string, reqEditors ...RequestEditorFn) (*PublicHolidayPublicHolidaysV3Response, error) {
	rsp, err := c.PublicHolidayPublicHolidaysV3(ctx, year, countryCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicHolidayPublicHolidaysV3Response(rsp)
}

// VersionGetVersionWithResponse request returning *VersionGetVersionResponse
func (c *ClientWithResponses) VersionGetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionGetVersionResponse, error) {
	rsp, err := c.VersionGetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionGetVersionResponse(rsp)
}

// ParseCountryAvailableCountriesResponse parses an HTTP response from a CountryAvailableCountriesWithResponse call
func ParseCountryAvailableCountriesResponse(rsp *http.Response) (*CountryAvailableCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountryAvailableCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CountryV3Dto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseCountryCountryInfoResponse parses an HTTP response from a CountryCountryInfoWithResponse call
func ParseCountryCountryInfoResponse(rsp *http.Response) (*CountryCountryInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountryCountryInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountryInfoDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePublicHolidayIsTodayPublicHolidayResponse parses an HTTP response from a PublicHolidayIsTodayPublicHolidayWithResponse call
func ParsePublicHolidayIsTodayPublicHolidayResponse(rsp *http.Response) (*PublicHolidayIsTodayPublicHolidayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicHolidayIsTodayPublicHolidayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLongWeekendLongWeekendResponse parses an HTTP response from a LongWeekendLongWeekendWithResponse call
func ParseLongWeekendLongWeekendResponse(rsp *http.Response) (*LongWeekendLongWeekendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LongWeekendLongWeekendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LongWeekendV3Dto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePublicHolidayNextPublicHolidaysResponse parses an HTTP response from a PublicHolidayNextPublicHolidaysWithResponse call
func ParsePublicHolidayNextPublicHolidaysResponse(rsp *http.Response) (*PublicHolidayNextPublicHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicHolidayNextPublicHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublicHolidayV3Dto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePublicHolidayNextPublicHolidaysWorldwideResponse parses an HTTP response from a PublicHolidayNextPublicHolidaysWorldwideWithResponse call
func ParsePublicHolidayNextPublicHolidaysWorldwideResponse(rsp *http.Response) (*PublicHolidayNextPublicHolidaysWorldwideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicHolidayNextPublicHolidaysWorldwideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublicHolidayV3Dto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePublicHolidayPublicHolidaysV3Response parses an HTTP response from a PublicHolidayPublicHolidaysV3WithResponse call
func ParsePublicHolidayPublicHolidaysV3Response(rsp *http.Response) (*PublicHolidayPublicHolidaysV3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicHolidayPublicHolidaysV3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublicHolidayV3Dto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseVersionGetVersionResponse parses an HTTP response from a VersionGetVersionWithResponse call
func ParseVersionGetVersionResponse(rsp *http.Response) (*VersionGetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionGetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInfoDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
